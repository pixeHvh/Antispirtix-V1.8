local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/SerenityHUB/Fluent/master/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "BloodShot V1.8",
    SubTitle = "Made by pixel",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightAlt
})


local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
	Fly = Window:AddTab({ Title = "Fly", Icon = ""}),
	Bots = Window:AddTab({ Title = "Bots", Icon = ""}),
	Visual = Window:AddTab({ Title = "Visual", Icon = ""}),
	Weapons = Window:AddTab({ Title = "Weapons", Icon = ""}),
	ScriptHub = Window:AddTab({ Title = "ScriptHub", Icon = ""}),
	ViewModels = Window:AddTab({ Title = "ViewModels", Icon = ""}),
	Credits = Window:AddTab({ Title = "Credits", Icon = ""})
}

local Options = Fluent.Options


    Tabs.Main:AddParagraph({
        Title = "Humanoid",
        Content = ""
    })


    Tabs.Main:AddButton({
        Title = "InfJump",
        Description = "Very important button",
        Callback = function()
          local ScreenGui = Instance.new("ScreenGui")
local main = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")
local Frame = Instance.new("Frame")
local INFJUMP = Instance.new("TextButton")
local TextLabel_2 = Instance.new("TextLabel")
--Properties:
ScreenGui.Parent = game.CoreGui
main.Name = "main"
main.Parent = ScreenGui
main.Active = true
main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
main.BorderSizePixel = 0
main.Position = UDim2.new(0.119258665, 0, 0, 0)
main.Size = UDim2.new(0, 146, 0, 28)
main.Active = true
main.Draggable = false
TextLabel.Parent = main
TextLabel.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 146, 0, 28)
TextLabel.Font = Enum.Font.SciFi
TextLabel.Text = "Misc"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 17.000
TextLabel.TextWrapped = true
Frame.Parent = main
Frame.BackgroundColor3 = Color3.fromRGB(86, 86, 86)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0, 0, 1, 0)
Frame.Size = UDim2.new(0, 146, 0, 61)
INFJUMP.Name = "INFJUMP"
INFJUMP.Parent = main
INFJUMP.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
INFJUMP.BorderSizePixel = 0
INFJUMP.Position = UDim2.new(0.794520497, 0, 1.6785717, 0)
INFJUMP.Size = UDim2.new(0, 21, 0, 21)
INFJUMP.Font = Enum.Font.SourceSans
INFJUMP.Text = ""
INFJUMP.TextColor3 = Color3.fromRGB(0, 0, 0)
INFJUMP.TextSize = 14.000
INFJUMP.MouseButton1Down:connect(function()
local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
 
_G.JumpHeight = 50;
 
function Action(Object, Function) if Object ~= nil then Function(Object); end end
 
UIS.InputBegan:connect(function(UserInput)
    if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        Action(Player.Character.Humanoid, function(self)
            if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                Action(self.Parent.HumanoidRootPart, function(self)
                    self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
                end)
            end
        end)
    end
end)
end)
TextLabel_2.Parent = main
TextLabel_2.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
TextLabel_2.BorderSizePixel = 0
TextLabel_2.Position = UDim2.new(0.0547945201, 0, 1.57142854, 0)
TextLabel_2.Size = UDim2.new(0, 94, 0, 28)
TextLabel_2.Font = Enum.Font.SciFi
TextLabel_2.Text = "Inf jump"
TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.TextSize = 17.000
TextLabel_2.TextWrapped = true
-- Scripts:
local function TKDWQ_fake_script()
local script = Instance.new('LocalScript', INFJUMP)
function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end
counter = 0
while wait(0.1)do
script.Parent.BackgroundColor3 = Color3.fromHSV(zigzag(counter),1,1)
 
counter = counter + 0.01
end
end
coroutine.wrap(TKDWQ_fake_script)()
        end
    })


    
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "HitBox",
        Description = "Size",
        Default = 2,
        Min = 0,
        Max = 200,
        Rounding = 1,
        Callback = function(Value)
        _G.HeadSize = (Value)
		_G.Disabled = true
		game:GetService('RunService').RenderStepped:connect(function()
		if _G.Disabled then
		for i,v in next, game:GetService('Players'):GetPlayers() do
		if v.Name ~= game:GetService('Players').LocalPlayer.Name then
		pcall(function()
		v.Character.Head.Size = Vector3.new(_G.HeadSize,_G.HeadSize,_G.HeadSize)
		v.Character.Head.Transparency = 1
		v.Character.Head.BrickColor = BrickColor.new("Red")
		v.Character.Head.Material = "Neon"
		v.Character.Head.CanCollide = false
		v.Character.Head.Massless = true
		end)
		end
		end
		end
		end) 
        end
    })
	
	local Slider = Tabs.Main:AddSlider("Slider", {
    Title = "Walkspeed",
    Description = "Speed",
    Default = 16,
    Min = 0,
    Max = 300, 
    Rounding = 1,
    Callback = function(Value)
        local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
        humanoid.WalkSpeed = Value
    end
	})
	Tabs.Main:AddButton({
    Title = "Inf camera zoom",
    Description = "after click check developer console f9 ",
    Callback = function()
    warn("Coming Soon")
    end
})

	Tabs.Main:AddButton({
    Title = "Teleport | ctrl + Mouse1Click",
    Description = "Distances greater than 3000 studs are not teleported to for saving.",
    Callback = function()
        local UserInputService = game:GetService("UserInputService")
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local MAX_DISTANCE = 3000

        local function toggleDamageProtection(character, protect)
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                if protect then
                    humanoid:SetAttribute("NoDamage", true)
                else
                    humanoid:SetAttribute("NoDamage", false)
                end
            end
        end

        local function teleportToMouse()
            local mouse = LocalPlayer:GetMouse()
            local character = LocalPlayer.Character

            if character and character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = character.HumanoidRootPart
                local currentPosition = humanoidRootPart.Position
                local targetPosition = mouse.Hit.p

                local distance = (targetPosition - currentPosition).Magnitude
                if distance <= MAX_DISTANCE then

                    toggleDamageProtection(character, true)

                    humanoidRootPart.CFrame = CFrame.new(targetPosition)

                    toggleDamageProtection(character, false)
                else
                    warn("Distances greater than 3000 studs are not teleported to for saving.")
                end
            end
        end

        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                teleportToMouse()
            end
        end) 
    end 
})

Tabs.Bots:AddParagraph({
	Title = "Aimbot",
	Content = ""
})

local Toggle = Tabs.Bots:AddToggle("Aimbot", {Title = "Aimbot", Default = false})

local aimBot = {
    isActive = false, 
    target = nil, 
    keyBind = Enum.KeyCode.F, 
    range = 1300,  
}

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

function aimBot:toggle()
    self.isActive = not self.isActive
    if self.isActive then
        print("Aimbot Activated")
    else
        self.target = nil
        print("Aimbot Deactivated")
    end
end
function aimBot:findClosestTarget()
    local closestTarget = nil
    local shortestDistance = self.range

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local targetPart = player.Character.Head
            local distance = (Camera.CFrame.Position - targetPart.Position).Magnitude

            if distance < shortestDistance then
                shortestDistance = distance
                closestTarget = player
            end
        end
    end

    return closestTarget
end

function aimBot:aimAtTarget()
    if self.target and self.target.Character and self.target.Character:FindFirstChild("Head") then
        local targetPart = self.target.Character.Head
        local cameraPosition = Camera.CFrame.Position
        local targetPosition = targetPart.Position

        Camera.CFrame = CFrame.new(cameraPosition, targetPosition)
    else
        self.target = nil 
    end
end

RunService.RenderStepped:Connect(function()
    if aimBot.isActive then
        if not aimBot.target or not aimBot.target.Character or not aimBot.target.Character:FindFirstChild("Head") then
            aimBot.target = aimBot:findClosestTarget()
        end

        if aimBot.target then
            aimBot:aimAtTarget()
        end
    end
end)

UserInputService.InputBegan:Connect(function(input, isProcessed)
    if not isProcessed and input.KeyCode == aimBot.keyBind then
        aimBot:toggle()
    end
end)

Toggle:OnChanged(function(value)
    if value then
        aimBot:toggle() 
    else
        aimBot:toggle()
    end
end)



	
Tabs.Bots:AddParagraph({
	Title = "Triggerbot Settings",
	Content = ""
})

local Toggle = Tabs.Bots:AddToggle("Triggerbot", {Title = "Triggerbot", Default = false})

local Slider = Tabs.Bots:AddSlider("Slider", {
    Title = "Triggerbot Delay",
    Description = "Time before a shot is taken (in seconds)",
    Default = 0,
    Min = 0,
    Max = 4,
    Rounding = 2,
    Callback = function(Value)
        triggerbotDelay = Value 
    end
})

local plrs = game:GetService('Players')
local plr = plrs.LocalPlayer
local mouse = plr:GetMouse()
local rs = game:GetService('RunService')

local isBotActive = false
local triggerbotDelay = Slider.Default 


local function startBot()
    while true do
        rs.RenderStepped:Wait() 

        if isBotActive then
            if mouse.Target then
                local char = mouse.Target:FindFirstAncestorOfClass('Model')
                if char and char:FindFirstChild('Head') then
                    task.wait(triggerbotDelay)  
                    mouse1click()  
                end
            end
        end
    end
end

Toggle:OnChanged(function()
    isBotActive = Toggle.Value

    if isBotActive then
        print("Triggerbot enabled with delay:", triggerbotDelay)
        task.spawn(startBot) 
    else
        print("Triggerbot disabled")
    end

    print("Triggerbot is now", isBotActive and "Enabled" or "Disabled")
end)

Tabs.Bots:AddParagraph({
	Title = "Spinbot Settings",
	Content = ""
})

local Slider = Tabs.Bots:AddSlider("Slider", {
    Title = "Spinbot",
    Description = "Speed",
    Default = 0,
    Min = 0,
    Max = 50,
    Rounding = 2,
    Callback = function(Value)
        SpinSpeed = tonumber(Value) or 0

if spinningConnection then
    spinningConnection:Disconnect()
    spinningConnection = nil
end

local function updateSpinning()
    if SpinSpeed > 0 then
        spinningConnection = game:GetService("RunService").RenderStepped:Connect(function(deltaTime)
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            local radiansPerSecond = SpinSpeed * 1 * math.pi

            local rotation = CFrame.Angles(0, radiansPerSecond * deltaTime, 0)
            humanoidRootPart.CFrame = humanoidRootPart.CFrame * rotation
        end)
    end
end

updateSpinning()
    end
})

	Tabs.Visual:AddButton({
		Title = "Esp | Player",
		Description = "",
		Callback = function()
		local players = game:GetService("Players")
       local localPlayer = players.LocalPlayer

       local function createESP(player)
           if player.Character then
               local highlight = Instance.new("Highlight")
               highlight.Parent = player.Character
               highlight.FillColor = Color3.new(1, 0, 0)
               highlight.OutlineColor = Color3.new(1, 1, 1)
               highlight.Name = "ESP"
           end
       end

       for _, player in pairs(players:GetPlayers()) do
           if player ~= localPlayer then
               createESP(player)
           end
       end

       players.PlayerAdded:Connect(function(player)
           player.CharacterAdded:Connect(function(character)
               createESP(player)

               player.Character:WaitForChild("Humanoid").Died:Connect(function()
                   if player.Character:FindFirstChild("ESP") then
                       player.Character.ESP:Destroy()
                   end
               end)
           end)
       end)

       for _, player in pairs(players:GetPlayers()) do
           if player ~= localPlayer then
               player.CharacterAdded:Connect(function(character)
                   createESP(player)

                   character:WaitForChild("Humanoid").Died:Connect(function()
                       if player.Character:FindFirstChild("ESP") then
                           player.Character.ESP:Destroy()
                       end
                   end)
               end)
           end
       end
		end
	})

	Tabs.Visual:AddButton({
    Title = "Esp | Lines/Traces",
    Description = "Draws lines to players",
    Callback = function()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera

        local Tracers = {}

        local function createTracer()
            local tracer = Drawing.new("Line")
            tracer.Color = Color3.new(1, 1, 1)
            tracer.Thickness = 2
            tracer.Transparency = 1
            return tracer
        end
        RunService.RenderStepped:Connect(function()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local character = player.Character
                    local humanoid = character:FindFirstChild("Humanoid")
                    local rootPart = character:FindFirstChild("HumanoidRootPart")

                    if humanoid and humanoid.Health > 0 then
                        local rootPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

                        if not Tracers[player] then
                            Tracers[player] = createTracer()
                        end

                        local tracer = Tracers[player]

                        if onScreen then
                            tracer.Visible = true
                            tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            tracer.To = Vector2.new(rootPos.X, rootPos.Y) 
						else
                            tracer.Visible = false
                        end
                    else
                        if Tracers[player] then
                            Tracers[player]:Remove()
                            Tracers[player] = nil
                        end
                    end
                elseif Tracers[player] then
                    Tracers[player]:Remove()
                    Tracers[player] = nil
                end
            end
        end)

        Players.PlayerRemoving:Connect(function(player)
            if Tracers[player] then
                Tracers[player]:Remove()
                Tracers[player] = nil
            end
        end)
    end
})

	Tabs.Visual:AddButton({
		Title = "Coming Soon",
		Description = "Coming Soon",
		Callback = function()
			warn("Coming Soon")
		end
	})

	Tabs.Visual:AddButton({
		Title = "Coming Soon",
		Description = "Coming Soon",
		Callback = function()
			warn("Coming Soon")
		end
	})

	Tabs.Visual:AddButton({
		Title = "Coming Soon",
		Description = "Coming Soon",
		Callback = function()
			warn("Coming Soon")
		end
	})


	local Toggle = Tabs.Fly:AddToggle("Fly", {Title = "Fly", Default = false})

local Slider = Tabs.Fly:AddSlider("FlySpeed", {
    Title = "Fly Speed",
    Description = "Choose Fly Speed",
    Default = 0,
    Min = 0,
    Max = 200,
    Rounding = 1,
    Callback = function(Value)
        _G.FlySpeed = Value * 5 
    end
})

_G.FlySpeed = 0 
_G.FlyEnabled = false 
local flyingUp = false
local flyingDown = false

local function toggleFly(state)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")

    if state then
        _G.FlyEnabled = true
        humanoid.PlatformStand = true
        rootPart.Anchored = true

        if not _G.FlyLoop then
            _G.FlyLoop = game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
                if not _G.FlyEnabled then
                    if _G.FlyLoop then
                        _G.FlyLoop:Disconnect()
                        _G.FlyLoop = nil
                    end
                    return
                end

                local moveDirection = humanoid.MoveDirection
                local verticalMovement = 0

                if flyingUp then
                    verticalMovement = _G.FlySpeed * deltaTime
                elseif flyingDown then
                    verticalMovement = -_G.FlySpeed * deltaTime
                end

                if moveDirection.Magnitude > 0 or verticalMovement ~= 0 then
                    rootPart.CFrame = rootPart.CFrame + 
                        moveDirection * (_G.FlySpeed * deltaTime) +
                        Vector3.new(0, verticalMovement, 0)
                end
            end)
        end
    else
        _G.FlyEnabled = false
        humanoid.PlatformStand = false
        rootPart.Anchored = false

        if _G.FlyLoop then
            _G.FlyLoop:Disconnect()
            _G.FlyLoop = nil
        end
    end
end

Toggle:OnChanged(function(value)
    toggleFly(value)
end)

local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.E then
        flyingUp = true
    elseif input.KeyCode == Enum.KeyCode.Q then
        flyingDown = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then
        flyingUp = false
    elseif input.KeyCode == Enum.KeyCode.Q then
        flyingDown = false -- Исправлено: завершение функции
    end
end)

Tabs.Weapons:AddButton({
    Title = "RPG Spam",
    Description = "Hold G to start spam",
    Callback = function()
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local UserInputService = game:GetService("UserInputService")
        local LocalPlayer = Players.LocalPlayer
        local RocketSystem = ReplicatedStorage:WaitForChild("RocketSystem")
        local FireRocket = RocketSystem:WaitForChild("Events"):WaitForChild("FireRocket")
        local FireRocketClient = RocketSystem:WaitForChild("Events"):WaitForChild("FireRocketClient")

        local fireRate = 0.1
        local isRPGSpamActive = false
        local maxDistance = 3000
        local noCooldownEnabled = false

        local function getPlayersInRadius()
            local playersInRadius = {}
            local targetPart = "HumanoidRootPart"

            for _, player in pairs(Players:GetPlayers()) do
                if player == LocalPlayer then continue end 
                local character = player.Character
                if not character then continue end

                local part = character:FindFirstChild(targetPart)
                local humanoid = character:FindFirstChildOfClass("Humanoid")

                if part and humanoid and humanoid.Health > 0 then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - part.Position).Magnitude
                    if distance <= maxDistance then
                        table.insert(playersInRadius, part)
                    end
                end
            end

            return playersInRadius
        end

        local function startRPGSpam()
            if isRPGSpamActive then return end 
            isRPGSpamActive = true

            task.spawn(function()
                while isRPGSpamActive do
                    local targets = getPlayersInRadius()
                    if #targets == 0 then
                        if not noCooldownEnabled then
                            wait(fireRate)
                        end
                        continue
                    end

                    for _, target in ipairs(targets) do
                        local targetPosition = target.Position
                        local directionToTarget = (targetPosition - LocalPlayer.Character.HumanoidRootPart.Position).unit

                        FireRocket:InvokeServer(
                            directionToTarget,
                            workspace[LocalPlayer.Name].RPG,
                            workspace[LocalPlayer.Name].RPG,
                            targetPosition
                        )

                        FireRocketClient:Fire(
                            targetPosition,
                            directionToTarget,
                            {
                                ["expShake"] = {["fadeInTime"] = 0.05, ["magnitude"] = 3, ["rotInfluence"] = {0.4, 0, 0.4}, ["fadeOutTime"] = 0.5, ["posInfluence"] = {1, 1, 0}, ["roughness"] = 3},
                                ["gravity"] = Vector3.new(0, -20, 0),
                                ["HelicopterDamage"] = 450,
                                ["FireRate"] = 600,
                                ["VehicleDamage"] = 350,
                                ["ExpName"] = "RPG",
                                ["ExpRadius"] = 12,
                                ["BoatDamage"] = 300,
                                ["TankDamage"] = 300,
                                ["Acceleration"] = 8,
                                ["ShieldDamage"] = 170,
                                ["Distance"] = 4000,
                                ["PlaneDamage"] = 500,
                                ["GunshipDamage"] = 170,
                                ["velocity"] = 200,
                                ["ExplosionDamage"] = 120
                            },
                            RocketSystem.Rockets["RPG Rocket"],
                            workspace[LocalPlayer.Name].RPG,
                            workspace[LocalPlayer.Name].RPG,
                            LocalPlayer
                        )

                        if not noCooldownEnabled then
                            wait(fireRate)
                        end
                    end
                end
            end)
        end

        local function toggleNoCooldown()
            noCooldownEnabled = not noCooldownEnabled
            print("No Cooldown:", noCooldownEnabled and "Enabled" or "Disabled")
        end

        UserInputService.InputBegan:Connect(function(input, isProcessed)
            if not isProcessed then
                if input.KeyCode == Enum.KeyCode.G then
                    startRPGSpam() 
                elseif input.KeyCode == Enum.KeyCode.H then
                    toggleNoCooldown() 
                end
            end
        end)

        UserInputService.InputEnded:Connect(function(input, isProcessed)
            if not isProcessed and input.KeyCode == Enum.KeyCode.G then
                isRPGSpamActive = false -- Остановить спам при отпускании G
            end
        end)
    end
})


	Tabs.Weapons:AddButton({
		Title = "NoCooldown"
		Description = "Hold left mouse button"
		Callback = function()
			local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local playerName = game:GetService("Players").LocalPlayer.Name
local isFiring = false

local function fireQuickLagRocket()
    local fireRocketVector = camera.CFrame.LookVector
    local fireRocketPosition = camera.CFrame.Position
    game:GetService("ReplicatedStorage").RocketSystem.Events.FireRocket:InvokeServer(
        fireRocketVector, workspace[playerName].RPG, workspace[playerName].RPG, fireRocketPosition
    )

    local fireRocketClientTable = {
        ["expShake"] = {["fadeInTime"] = 0.05, ["magnitude"] = 3, ["rotInfluence"] = {0.4, 0, 0.4}, ["fadeOutTime"] = 0.5, ["posInfluence"] = {1, 1, 0}, ["roughness"] = 3},
        ["gravity"] = Vector3.new(0, -20, 0), ["HelicopterDamage"] = 450, ["FireRate"] = 15, ["VehicleDamage"] = 350, ["ExpName"] = "RPG",
        ["RocketAmount"] = 333, ["ExpRadius"] = 12, ["BoatDamage"] = 300, ["TankDamage"] = 300, ["Acceleration"] = 8, ["ShieldDamage"] = 11170,
        ["Distance"] = 400000, ["PlaneDamage"] = 500, ["GunshipDamage"] = 170, ["velocity"] = 200, ["ExplosionDamage"] = 120
    }

    local fireRocketClientInstance1 = game:GetService("ReplicatedStorage").RocketSystem.Rockets["RPG Rocket"]
    local fireRocketClientInstance2 = workspace[playerName].RPG
    local fireRocketClientInstance3 = workspace[playerName].RPG
    game:GetService("ReplicatedStorage").RocketSystem.Events.FireRocketClient:Fire(
        camera.CFrame.Position, camera.CFrame.LookVector, fireRocketClientTable, fireRocketClientInstance1, fireRocketClientInstance2, fireRocketClientInstance3,
        game:GetService("Players").LocalPlayer, nil, { [1] = camera:FindFirstChild("RPG") }
    )
end

UserInputService.InputBegan:Connect(function(input, isProcessed)
    if not isProcessed then
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isFiring = true
            while isFiring do
                fireQuickLagRocket() 
                wait(0.001) 
            end
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isFiring = false 
    end
end)
		end
	})
	Tabs.Weapons:AddButton({
		Title = "Inf Ammo | for all weapons",
		Description = "",
		Callback = function()
			local player = game.Players.LocalPlayer


local function updateAmmo(container)
    if container then
        for _, weapon in ipairs(container:GetChildren()) do
            if weapon:IsA("Tool") and weapon:FindFirstChild("ACS_Modulo") then
                local acsModule = weapon.ACS_Modulo
                local variaveis = acsModule:FindFirstChild("Variaveis")
                
                if variaveis and variaveis:FindFirstChild("Ammo") then
                    local ammo = variaveis.Ammo
                    ammo.Value = math.huge
                    print("Ammo set to infinite for: " .. weapon.Name)
                else
                    print("Ammo not found in weapon: " .. weapon.Name)
                end
            else
                print("Weapon or ACS_Modulo not found for: " .. weapon.Name)
            end
        end
    end
end

while task.wait(0.5) do
    updateAmmo(player.Backpack)

    if player.Character then
        updateAmmo(player.Character)
    end
end
		end
	})

local Toggle = Tabs.ViewModels:AddToggle("120 FOV", {Title = "120 FOV", Default = false})
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local DefaultFOV = Camera.FieldOfView
local TargetFOV = 120
local isZoomActive = false

local function updateCameraZoom()
    if isZoomActive then
        Camera.FieldOfView = TargetFOV
    else
        Camera.FieldOfView = DefaultFOV
    end
end

Toggle:OnChanged(function()
    isZoomActive = Toggle.Value
    updateCameraZoom()
end)

LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid", 10)
    updateCameraZoom() 
end)

	
	Tabs.Credits:AddParagraph({
		Title = "Scipts - Pixel",
		Content = "discord - pixelebnytyy",
	})

	Tabs.Credits:AddParagraph({
		Title = "Beta tester - Over",
		Content = "discord - lastkaky",
	})
